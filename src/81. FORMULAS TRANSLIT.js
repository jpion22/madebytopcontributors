// /* #!/usr/bin/env node; */
/* jshint -W100 */
/**
 * @name      translit.js
 * @author    XGuest <xguest@list.ru>
 * @link      https://github.com/xguest/iso_9_js
 * @version   1.0.4
 * @copyright GPL applies.
 *            No warranties XGuest[28.03.2016/07:59:18] translit [ver.1.0.4]
 * #guid      {E7088033-479F-47EF-A573-BBF3520F493C}
 *
 * @description Прямая и обратная транслитерация
 *              Соответствует ISO 9:1995 и ГОСТ 7.79-2000 системы А и Б
 *
 * @param {String}  str транслитерируемая строка
 * @param {Number}  typ ± направление (тип) транслитерации
 *                      + прямая с латиницы в кирилицу
 *                      - обратная
 *                      system A = 1-диакритика;
 *                      system B = 2-Беларусь;3-Болгария;4-Македония;5-Россия;6-Украина;
 * @example
 * function example() {
 *  var a, b = [
 *     [],
 *     ["Диакритика", "Съешь ещё этих мягких французских булок, да выпей же чаю!"],
 *     ["Беларускую", "З'ясі яшчэ гэтых мяккіх французскіх булак, ды выпі ж чаю!"],
 *     ["Български",  "Яжте повече от тези меки кифлички, но също така се пие чай!"],
 *     ["Македонски", "Јадат повеќе од овие меки францускиот ролни, па пијат чај!"],
 *     ["Русский",    "Съешь ещё этих мягких французских булок, да выпей же чаю!"],
 *     ["Українська", "З'їж ще цих м'яких французьких булок, та випий же чаю!"]
 *  ], c, d;
 *  for(a = 1; a < b.length - 1; a++) {
 *   c = b[a][0];                                       // Language
 *   d = b[a][1];                                       // Source
 *   e = translit(d, a);                                // Forward
 *   console.log(
 *    "%s - %s\nSource  : %s\nTranslit: %s\nReverse : %s\n",
 *    c,                                                // Language
 *    translit(c, a),                                   // Transliterated language
 *    d,                                                // Source
 *    e,                                                // Forward
 *    translit(e, -1 * a)                               // Reverse
 *   );
 *  }
 * };
 **/
function translit(str, typ) {
  var func = (function(typ) {
    /** Function Expression
     * Вспомогательная функция.
     *
     * FINISHED TESTED!
     * В ней и хотелось навести порядок.
     *
     * Проверяет направление транслитерации.
     * Возвращает массив из 2 функций:
     *  построения таблиц транслитерации.
     *  и пост-обработки строки (правила из ГОСТ).
     *
     * @param  {Number} typ
     * @return {Array}  Массив функций пред и пост обработки.
     **/
    function prep(a) {
      var write = [
        function(chr, row) {
          trantab[row] = chr;
          regarr.push(row);
        },
        function(row, chr) {
          trantab[row] = chr;
          regarr.push(row);
        }
      ][a];
      return function(col, row) {
        // создаем таблицу и RegExp
        var chr = col[abs] || col[0]; // Символ
        if (chr) write(chr, row); // Если символ есть
      };
    }
    var abs = Math.abs(typ); // Абсолютное значение транслитерации
    if (typ === abs) {
      // Прямая транслитерация в латиницу
      str = str.replace(/(i(?=.[^аеиоуъ\s]+))/gi, '$1`'); // "i`" ГОСТ ст. рус. и болг.
      return [
        prep(0), // Возвращаем массив функций
        function(str) {
          // str - транслируемая строка.
          return str
            .replace(/i``/gi, 'i`') // "i`" в ГОСТ ст. рус. и болг.
            .replace(/((c)z)(?=[ieyj])/gi, '$1'); // "cz" в символ "c"
        }
      ];
    } else {
      // Обратная транслитерация в кириллицу
      str = str.replace(/(c)(?=[ieyj])/gi, '$1z'); // Правило сочетания "cz"
      return [
        prep(1),
        function(str) {
          return str;
        }
      ]; // nop - пустая функция.
    }
  })(typ);
  var iso9 = {
      // Объект описания стандарта
      // Имя - кириллица
      //   0 - общие для всех
      //   1 - диакритика         4 - MK|MKD - Македония
      //   2 - BY|BLR - Беларусь  5 - RU|RUS - Россия
      //   3 - BG|BGR - Болгария  6 - UA|UKR - Украина
      /*-Имя---------0-,-------1-,---2-,---3-,---4-,----5-,---6-*/
      щ: ['', '\u015D', '', 'sth', '', 'shh', 'shh'], // 'щ'
      я: ['', '\u00E2', 'ya', 'ya', '', 'ya', 'ya'], // 'я'
      є: ['', '\u00EA', '', '', '', '', 'ye'], // 'є'
      ѣ: ['', '\u011B', '', 'ye', '', 'ye', ''], //  ять
      і: ['', '\u00EC', 'i', 'i`', '', 'i`', 'i'], // 'і' йота
      ї: ['', '\u00EF', '', '', '', '', 'yi'], // 'ї'
      ё: ['', '\u00EB', 'yo', '', '', 'yo', ''], // 'ё'
      ю: ['', '\u00FB', 'yu', 'yu', '', 'yu', 'yu'], // 'ю'
      ж: ['zh', '\u017E'], // 'ж'
      ч: ['ch', '\u010D'], // 'ч'
      ш: ['sh', '\u0161', '', '', '', '', ''], // 'ш'
      ѳ: ['', 'f\u0300', '', 'fh', '', 'fh', ''], //  фита
      џ: ['', 'd\u0302', '', '', 'dh', '', ''], // 'џ'
      ґ: ['', 'g\u0300', '', '', '', '', 'g`'], // 'ґ'
      ѓ: ['', '\u01F5', '', '', 'g`', '', ''], // 'ѓ'
      ѕ: ['', '\u1E91', '', '', 'z`', '', ''], // 'ѕ'
      ќ: ['', '\u1E31', '', '', 'k`', '', ''], // 'ќ'
      љ: ['', 'l\u0302', '', '', 'l`', '', ''], // 'љ'
      њ: ['', 'n\u0302', '', '', 'n`', '', ''], // 'њ'
      э: ['', '\u00E8', 'e`', '', '', 'e`', ''], // 'э'
      ъ: ['', '\u02BA', '', 'a`', '', '``', ''], // 'ъ'
      ы: ['', 'y', 'y`', '', '', 'y`', ''], // 'ы'
      ў: ['', '\u01D4', 'u`', '', '', '', ''], // 'ў'
      ѫ: ['', '\u01CE', '', 'o`', '', '', ''], //  юс
      ѵ: ['', '\u1EF3', '', 'yh', '', 'yh', ''], //  ижица
      ц: ['cz', 'c'], // 'ц'
      а: ['a'], // 'а'
      б: ['b'], // 'б'
      в: ['v'], // 'в'
      г: ['g'], // 'г'
      д: ['d'], // 'д'
      е: ['e'], // 'е'
      з: ['z'], // 'з'
      и: ['', 'i', '', 'i', 'i', 'i', 'y`'], // 'и'
      й: ['', 'j', 'j', 'j', '', 'j', 'j'], // 'й'
      к: ['k'], // 'к'
      л: ['l'], // 'л'
      м: ['m'], // 'м'
      н: ['n'], // 'н'
      о: ['o'], // 'о'
      п: ['p'], // 'п'
      р: ['r'], // 'р'
      с: ['s'], // 'с'
      т: ['t'], // 'т'
      у: ['u'], // 'у'
      ф: ['f'], // 'ф'
      х: ['x', 'h'], // 'х'
      ь: ['', '\u02B9', '`', '`', '', '`', '`'], // 'ь'
      ј: ['', 'j\u030C', '', '', 'j', '', ''], // 'ј'
      '\u2019': ["'", '\u02BC'], // '’'
      '\u2116': ['#'] // '№'
      /*-Имя---------0-,-------1-,---2-,---3-,---4-,----5-,---6-*/
    },
    regarr = [],
    trantab = {}; // Создание таблицы и массива RegExp
  /* jshint -W030 */ for (var row in iso9) {
    if (Object.hasOwnProperty.call(iso9, row)) {
      func[0](iso9[row], row);
    }
  }
  /* jshint +W030 */
  return func[1](
    // функция пост-обработки строки (правила и т.д.)
    str.replace(
      // Транслитерация
      new RegExp(regarr.join('|'), 'gi'), // Создаем RegExp из массива
      function(R) {
        // CallBack Функция RegExp
        if (R.toLowerCase() === R) {
          // Обработка строки с учетом регистра
          return trantab[R];
        } else {
          return trantab[R.toLowerCase()].toUpperCase();
        }
      }
    )
  );
}
