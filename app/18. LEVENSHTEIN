/**
* Display the range, with the Levenshtein values. 
* @param {A:E} sRange The first range of strings to be checked.
* @param {A:E} tRange The second range of strings to be checked.
* return Levenshtein values
* @customfunction
*/
function LevenshteinDistance(sRange, tRange) {
  if(sRange[0].length > 1 || tRange[0].length > 1) {
    throw "Only one column ranges can be evaluated !!";
  } else if (sRange.length !== tRange.length) {
    throw "Ranges are of different length !!";
  } else {
    return sRange.map( function (s, z) {
      var t = tRange[z];
      var sLen = s[0].length;
      var tLen = t[0].length;
           
      if(sLen === 0) {
        return tLen;
      } 
      if(tLen === 0) {
        return sLen;
      }
      
      var d = Array.apply(null, Array(tLen + 1)).map(function (ta, i, arrT) { 
        return Array.apply(null, Array(sLen + 1)).map( function (sa, j, arrS) {
          return j === 0 ? i : (i === 0 ? j : null);
        })
      });
      
      return Array.prototype.map.call(t.toString().toLowerCase(), function (tLet, k) {
        return Array.prototype.map.call(s.toString().toLowerCase(), function (sLet, l) {
          return  d[k + 1][l + 1] = Math.min(d[k][l + 1]+1, d[k + 1][l]+1, d[k][l] + ((sLet === tLet) ? 0 : 1));
        })
      })[tLen - 1][sLen - 1];
    });
  }
}
